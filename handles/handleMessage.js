const fs = require('fs');
const path = require('path');
const { sendMessage } = require('./sendMessage');
const axios = require("axios");

// Load command modules
const commands = new Map();
const lastImageByUser = new Map();
const lastVideoByUser = new Map();
const prefix = '-';

fs.readdirSync(path.join(__dirname, '../commands'))
  .filter(file => file.endsWith('.js'))
  .forEach(file => {
    const command = require(`../commands/${file}`);
    commands.set(command.name.toLowerCase(), command);
  });

// ‚úÖ Updated Gemini API URL
const GEMINI_API_URL = "https://kryptonite-api-library.onrender.com/api/gemini-vision";
const USER_AGENT = "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36";

const fontMapping = {
  'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö',
  'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°',
  'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®',
  'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
  'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
  'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
  'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
  'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
};

function convertToBold(text) {
  return text.replace(/(?:\*\*(.*?)\*\*|## (.*?)|### (.*?))/g, (match, boldText, h2Text, h3Text) => {
    const targetText = boldText || h2Text || h3Text;
    return [...targetText].map(char => fontMapping[char] || char).join('');
  });
}

async function handleGemini(senderId, prompt, pageAccessToken, event, imageUrl) {
  if (!prompt && !imageUrl) {
    return sendMessage(senderId, { text: "ùñØùñ±ùñÆùñµùñ®ùñ£ùñ§ ùñ∞ùñ¥ùñ§ùñ≤ùñ≥ùñ®ùñÆùñ≠ ùñÆùñ± ùñ®ùñ¨ùñ†ùñ¶ùñ§." }, pageAccessToken);
  }

  try {
    // üïê Send thinking indicator before processing
    await sendMessage(senderId, { text: "‚ú¶ | ùöÉùöëùöíùöóùöîùöíùöóùöê ùöôùöïùöéùöäùöúùöé ùö†ùöäùöíùöù.." }, pageAccessToken);

    if (!imageUrl) {
      if (event.message.reply_to && event.message.reply_to.mid) {
        imageUrl = await getRepliedImage(event.message.reply_to.mid, pageAccessToken);
      } else if (event.message?.attachments && event.message.attachments[0]?.type === "image") {
        imageUrl = event.message.attachments[0].payload.url;
      }
    }

    const { data } = await axios.get(GEMINI_API_URL, {
      params: { prompt, uid: senderId, imgUrl: imageUrl || "" },
      headers: { "User-Agent": USER_AGENT, "Accept": "application/json" }
    });

    const result = data.response || "No response from Gemini.";
    const formatted = `
‚ú¶ | ùô∂ùöòùöòùöêùöïùöé ùô∂ùöéùöñùöíùöóùöí
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${convertToBold(result)}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;
    await sendConcatenatedMessage(senderId, formatted, pageAccessToken);

  } catch (err) {
    console.error("Gemini Error:", err);
    await sendMessage(senderId, { text: `Error: ${err.message || "Something went wrong."}` }, pageAccessToken);
  }
}

async function getRepliedImage(mid, pageAccessToken) {
  try {
    const { data } = await axios.get(`https://graph.facebook.com/v21.0/${mid}/attachments`, {
      params: { access_token: pageAccessToken },
      headers: { "User-Agent": USER_AGENT, "Accept": "application/json" }
    });
    return data?.data[0]?.image_data?.url || "";
  } catch {
    throw new Error("Failed to retrieve replied image.");
  }
}

async function sendConcatenatedMessage(senderId, text, pageAccessToken) {
  const maxMessageLength = 2000;
  if (text.length > maxMessageLength) {
    const messages = splitMessageIntoChunks(text, maxMessageLength);
    for (const message of messages) {
      await new Promise(resolve => setTimeout(resolve, 500));
      await sendMessage(senderId, { text: message }, pageAccessToken);
    }
  } else {
    await sendMessage(senderId, { text }, pageAccessToken);
  }
}

function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}

// üßπ Gemini Clear Command (API-based)
async function handleGeminiClear(senderId, pageAccessToken) {
  try {
    const { data } = await axios.get(GEMINI_API_URL, {
      params: { prompt: "clear", uid: senderId },
      headers: { "User-Agent": USER_AGENT, "Accept": "application/json" }
    });

    const message = data.response || "üßπ Conversation successfully cleared.";
    await sendMessage(senderId, { text: message }, pageAccessToken);
  } catch (err) {
    console.error("Gemini Clear Error:", err);
    await sendMessage(senderId, { text: "‚ùå Failed to clear Gemini conversation." }, pageAccessToken);
  }
}

async function handleMessage(event, pageAccessToken, recordCommandUsage) {
  const senderId = event?.sender?.id;
  if (!senderId) return console.error('Invalid event object');

  const messageText = event?.message?.text?.trim();
  const attachments = event?.message?.attachments || [];

  const imageAttachment = attachments.find(a => a.type === 'image');
  const videoAttachment = attachments.find(a => a.type === 'video');

  const imageUrl = imageAttachment?.payload?.url;
  const videoUrl = videoAttachment?.payload?.url;

  if (imageUrl) lastImageByUser.set(senderId, imageUrl);
  if (videoUrl) lastVideoByUser.set(senderId, videoUrl);

  const lastImage = imageUrl || lastImageByUser.get(senderId);
  const lastVideo = videoUrl || lastVideoByUser.get(senderId);
  const mediaToUpload = lastImage || lastVideo;

  if (!messageText) return console.log('Received message without text');

  // üßπ Check for clear command (API-based)
  if (messageText.toLowerCase() === "clear") {
    await handleGeminiClear(senderId, pageAccessToken);
    return;
  }

  const [rawCommand, ...args] = messageText.startsWith(prefix)
    ? messageText.slice(prefix.length).split(' ')
    : messageText.split(' ');

  const commandKey = rawCommand.toLowerCase();
  const mediaCommands = [''];

  try {
    console.log(`Received command: ${commandKey}, args: ${args.join(' ')}`);

    if (mediaCommands.includes(commandKey)) {
      if (recordCommandUsage) recordCommandUsage(commandKey);
      switch (commandKey) {
        case '':
          await handleGemini(senderId, args.join(" "), pageAccessToken, event, lastImage);
          lastImageByUser.delete(senderId);
          break;

        // unchanged commands
        case '':
        case '':
          if (lastImage) {
            await commands.get(commandKey).execute(senderId, [], pageAccessToken, lastImage);
            lastImageByUser.delete(senderId);
          } else {
            await sendMessage(senderId, { text: `‚ùå Please send an image first, then type "${commandKey}".` }, pageAccessToken);
          }
          break;

        case '':
          if (mediaToUpload) {
            await commands.get(commandKey).execute(senderId, [], pageAccessToken, mediaToUpload);
            lastImageByUser.delete(senderId);
            lastVideoByUser.delete(senderId);
          } else {
            await sendMessage(senderId, { text: `‚ùå Please send a file first, then type "${commandKey}".` }, pageAccessToken);
          }
          break;
      }
      return;
    }

    // ‚úÖ Normal command
    if (commands.has(commandKey)) {
      if (recordCommandUsage) recordCommandUsage(commandKey);
      await commands.get(commandKey).execute(senderId, args, pageAccessToken, event, sendMessage);
    } 
    // ‚úÖ Default Gemini fallback
    else {
      await handleGemini(senderId, messageText, pageAccessToken, event, lastImage);
    }

  } catch (error) {
    console.error(`Error executing command "${commandKey}":`, error);
    await sendMessage(senderId, {
      text: error.message || `‚ùå There was an error executing "${commandKey}".`
    }, pageAccessToken);
  }
}

module.exports = { handleMessage };